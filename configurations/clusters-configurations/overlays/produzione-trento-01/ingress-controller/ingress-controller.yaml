apiVersion: v1
data:
  tls.crt: 
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQyt4SDVtRHpnZXA3YnYKVWtnZHNzMEpTMDRDN3lxUU1GYnB4aHMzL1htSkhVT2YwUE9DYUhzNnovTjBUd01nblhWamIrWmJwNmVGa25NMwp5MkxiTDR3WEp4SG9DcTErVEd3WVJqbXEzV1ptWE4rODZaV3V2cm9JSkRZNzBhSEF6WXFHcDgxNFZNZDBKV1hGCjVrZHF4bTRWMVR3b1YyTXZPR1E4WUE5R1Q1UVZXQ0ZzUVpTTitXUnk2aEMzN2FMUUcrLzYwVmNFMDd6MVVNajEKcFVQV1crOFU1OGlEcHhPZ09NYk95K3lwNlNTWGV1SEsrM0N6ckkvOVR1NEJ2SXkxM0ZkMDNzdFZ2bWJZVnE4OApHNElpMGlnVUZOSmJ0V2crejUyTGtqYUtLTUxpajVKN1F2OVBJd2FMaGpkK0FDcHFUUVFjUnFCY1pVY1BQbktzCktFSnBVd21kQWdNQkFBRUNnZ0VBRFVNRHRueWdYaUV5cW5pQjR1Nm5LbG85MWg1aVN4dlJMdmRDdFNXOTZUWkwKbVRTaGVSTmlYYmhQS0dyRndPS3hZblJKQTE0b1d6VFBKYlhSN1lMa3JrZGRDMUNTdHhFQkFyNy9DMDNRN0pUUQpTUVhFRGgzY09PeXJpSVVPUmFVRVdGQWFESjk0TGk3YllHS2QzR0puRE1XQ0pSdk9IVjVDT2FCRDc1TmdyQXNSCmpITCsrUUljU0Zob0ExTXd3emM1bVJ1aXE2enRTRC80cjR6UjJkU1E2RXRFVTd1TkM3S3F2V0tBRFY4TnU1cFYKeHpMQ3lQdVNuK2dueFdFZUxlUS83cUt4ek1KcTZqTTNvdUw3TE9sYmoySjdCVWJqb0pQYlIwQ3o5MFZ1Tyt0UwoyVHB2VC81cUlTVXY4S0tkdmxaeUp5RWw1dERVcTF0UFRTZWhIQXorZ1FLQmdRRHlWTkdWcmlBK1htRXpEVFo2Ckxja1RRSjVybVVaVytQNk5GRWlGblhSVWxjTVl3TjFLZDNCbmUwQnZ1eDYvZVpxaUgyb0l4UjIrN1ZoOEFqQTIKS1BKSTVhMUw2M2pTYk5EQ3NBNThUQkxudVorWkkraENFVVkzb005Ukl2Ymd5c3Y4L0ViMVY2SmRSeTNjWEdaVApqaktwWlc5a1pIcDVpUkdCOTBuMEIraVorUUtCZ1FESmh4eWtoVzgzQmh5REdyQ2l4SHpZcWJqalhoYmxsUllyCnVYN1QzLzFBVWZVQXV1MjBFdjlOSGpVWm1NSWhGeUVnVjdQb1NJMjNCUVNmaWJtS0UyaCtVN1dobSs1a1NYYjgKbklreXkrMi8rWGpveEo0ZnNKbVd2Vnh6T2lvb0pFTlE2ZVhCNkZqQ2R2UkhCbng4clpFNVhJYndBSWQ5RE02ZAorQ0diUkJRMXhRS0JnSExTaDhCQmtsdWJBcmxhNEY1Q0JZMk94OEc2RFo4Mk9mOEZCbHZ4UUdhMzA0cU9FQXl4CnpWdnJCWndyY0tWUGJGcTNRZG5IOUpFOEN2b3ZXMEsrWWhieVpRdWRGbEcyWjdCb0ZXVUY4c3REcEFDL0I5VU8KTkZRMWFTWkx4K2k1anJCZnBRdXBLM0RCUWxTd24zZWw0QkZ0MDdzZzlQdFRYQzFWeS8vS0k0ZVpBb0dBQ2cxZwpRMkNZaEpFY2VQbXExK09mS3B1RXFtcTJENnVaR0lNL0xVaGQ5SWhpQlRCTnpRNnBoMm83VWRTSjBtYTU4MGdNCnBFaUNNUi9oOUNkRmh2cWkyckpJUEJCd0dyYURaZVJVLzZDbWNrMzZWdm4vdlNyczdsVHh1Sm10SXFWMGFpUFEKbnhSODRPNVlEdmJtM0wwM29qbllUVDVwZzdaUTFCWmRic1k5ajlVQ2dZRUF2NHJzV2RNaUltOFRveHRJR1Q4UQpmT0FEY0hvK0lwc0FuQjZPRnBKSTVSTFNpb1ZnZjFTZ3RmZk40bGF6aXFsQ1VCZG04ZWk5YnkySEx6UDlyUC9HCmFacm9BWVpJZ1VlSTN2aU9OYW41NkNNVm51U2IyRGpGUEFZOVZKVmJOT0hDNW85YzBPNlNZYWlHalVMSnZhODEKeTlVSHBzUG9INys2b2w3U0U3MkxvRlE9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: wildcard
  namespace: openshift-ingress
type: kubernetes.io/tls
