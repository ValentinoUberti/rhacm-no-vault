apiVersion: v1
data:
  tls.crt: 
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRRExtQkVqMEVDaTV1ZEwKRmNHdm1kV2g4RzVTaVVjWHlRSFRVS3VLZlI1dVdXbXBSdlBuSTB0Z2hrVm5wMmVLcDhQVVZ2V010Q3l5SnJxSwphWFkwZjNNRHl2QVlXaU5Bb2tQNUN6QmpmRU5YNkxaLzc1WFhPZ1JGeDVLQStYQlkyRlpKOVY1c1hJWUZreUtQCnRsdHl6dURreFNvTUhYZmJBR3hQQVF1eVBXMkJ4VjUwb3Q4b1dRTmE2NDFtMUJ3NmZYem9BWmk2TWlxQ1dkNVQKSngzakdua1MzYURGN3hjV1lBSVJSQWpzRjNHR25EeEhvdXlDamtLNHZPRTE0bWU3aFR3Z2c0bEpnTjJyQlNjVAp6ZlJUMWNJUjZORzVKRHZ3THlTeUdnYWNYZ3JIU2l5dDNCTmdidU80U3plL1Q3VzZPbWFTVnd0UUtSaDAwQmx0Cm0zY1ErOUI3QWdNQkFBRUNnZ0VBRWMyN2VmbEZIYm01Y2l4MTRvZytVVW40SzhtTGFQNFA1YzNCSW53c2hCUFgKbEpENjFUU1Y2OXZ5QjgxdzFZUTBNTVpsOUtidzNhZGJXcTA4US96OUx0QzVURGZkcTFKRlJXc0FFVU1WbElOcQpLaWZtWDRyWVFzM2Y5dDFaUUx1eVdBZFgrWHZoMEd6OGNick5wbTJHNXhxQ3djcDE1N1hTd3RuaGp2V21OTm5JCmJUZUNVdUFhdU1Ma3dCdm1oVzdCQWo0bUhkR1Q5Z0RiSjd6ZS8rTzNUbGFhVmFQcnUvYUs2TlB5OFRDRitMOUwKZE5SV21BSkJJMTN4Y2duN3RPaEJIMEI3YVNmOEkzNDZLeHBvLzhTM0QyWFYvdUJuWVB5NGo2UndESTZIcWRNTwpKN1lGSlNaS3o4a09kcFJaL2RoYXF5RHlINTdHNWRSOHhpbFNYZ0FXaVFLQmdRRCttMEkwZ0d3WXVYSWRaMzVnCnlTdjI2dDBCT01leDR5MVU2TGg3OFlncGV1cEZzSEpZRC9Cb1NqM3E0eUZFQjRyeDB0TlR6ZFVnWng2MUNYU1AKejMvRjE4d0VKZVJwajVWUHFWODVmVXkzSktvMGFqMTI2RkMwNHZwcldNYTh1RzlUODd5N1VWUWRSRldGR2J0YQpJc0N2OEx0VWFLL013RmNTRHh2ZXgweDVyd0tCZ1FETXRWVVN0K1hnYzhBSmI3MFJvN3pqaHM2SzZRU0xxMnZxClhjb2dqQmh4dC9BY0MyemZNVGVBYnZFNDYzV0YxeGxTZmNFRDhRaVlJUGdsSGRrRVBTU0JoS0xhYmRWN3Jmc0wKMThIYTI2UHcrQU81QkJ0c1k2anhiRndPMHVpNkw4bnE5bXNRb0FsOWFrVzc5RXVRMzVuYU5nL01mN1ljdXZvdgpmM1hKNXExazlRS0JnRjlGSTJuWDRCc0VVV0lWVnVIS2hRdjQ2RWZMd2xXYkIxeHRWSkwwVnhvR1oyRTZYQjc5Cm45eTJZeUxnYUpNM0sxTy9xdG9CL0UwS3FSL2U4T0hiS0JtVTNUOTBHbHN4b2hKVDgxRGt4TzhHNWpXRXg0a1YKOXhVb2xjSFRUMUpReFQrcHhhWm1FVTUrUW0zeXFmdFpZN2F5SXJhOEVZUlJPSU9HYWN4YjBRNzdBb0dBWEdIWgpLc0ZqTkpBSU1qb0RFVnJiZTdMeXN5M0ZwMktOS1E5NmtJV280bWtvS3YvYytqeXoxM281MG40d1kxNVhSeXNKCldFWUdvdUQrRzRJRTFpemh0TEd1N1BSMFM0U1FyeCtIbE1WYWp2emVjVGl4UjVFU1JTR3B5ZWJVc0hHd3BpRGUKNEhuWXpvaVBQK3RYenVHYUJTZ3dxUkZabGsycmFwUVRERExXUGFFQ2dZQU1UUWNhMGtoZ1h1SjJpanhid2cyRQo1ZDR5bENjbno4ZEhPK1NyV0xxb1orVjFCQTYydU1yek5idWJ2U2ZCWWU3RXdQbGJucXhoUDVJVEJIUmV6VURuClNRUUhRWG4zVXdWcTJTTDhSY0R2K3hScnpIK2UwNnhDL0RUQUdNc09DZU41M2VvNWx1WHVPbmhHcVJIWndiaTIKVTR2bHJWSFVWYmx0S1JsK09yQkNCZz09Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  creationTimestamp: null
  name: wildcard
  namespace: openshift-ingress
type: kubernetes.io/tls
